apiVersion: v1
kind: Namespace
metadata:
  name: redisgate-dev
  labels:
    name: redisgate-dev
    environment: development
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redisgate-config
  namespace: redisgate-dev
data:
  # Application configuration
  APP_HOST: "0.0.0.0"
  APP_PORT: "8080"
  APP_LOG_LEVEL: "debug"
  APP_ENVIRONMENT: "development"
  
  # PostgreSQL configuration (using external service)
  POSTGRES_HOST: "host.minikube.internal"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "redisgate_dev"
  
  # Redis configuration (using external service)
  REDIS_HOST: "host.minikube.internal"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  
  # Kubernetes configuration
  K8S_NAMESPACE: "redisgate-dev"
  K8S_DOMAIN: "redisgate.local"
---
apiVersion: v1
kind: Secret
metadata:
  name: redisgate-secrets
  namespace: redisgate-dev
type: Opaque
stringData:
  # Database credentials
  POSTGRES_USER: "redisgate_dev"
  POSTGRES_PASSWORD: "redisgate_dev_password"
  
  # Redis credentials
  REDIS_PASSWORD: "redisgate_redis_password"
  
  # JWT secret
  JWT_SECRET: "development_jwt_secret_key_change_in_production"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redisgate
  namespace: redisgate-dev
  labels:
    app: redisgate
    environment: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redisgate
  template:
    metadata:
      labels:
        app: redisgate
        environment: development
    spec:
      containers:
      - name: redisgate
        image: redisgate:latest
        imagePullPolicy: Never  # Use local image in Minikube
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: RUST_LOG
          value: "debug"
        - name: RUST_BACKTRACE
          value: "1"
        envFrom:
        - configMapRef:
            name: redisgate-config
        - secretRef:
            name: redisgate-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: redisgate-service
  namespace: redisgate-dev
  labels:
    app: redisgate
spec:
  selector:
    app: redisgate
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: redisgate-ingress
  namespace: redisgate-dev
  labels:
    app: redisgate
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: redisgate.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: redisgate-service
            port:
              number: 80
---
# Sample Redis instance custom resource (placeholder for future operator)
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: redishttpinstances.redisgate.io
spec:
  group: redisgate.io
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              name:
                type: string
              domain:
                type: string
              replicas:
                type: integer
                minimum: 1
                maximum: 10
              resources:
                type: object
                properties:
                  cpu:
                    type: string
                  memory:
                    type: string
          status:
            type: object
            properties:
              phase:
                type: string
                enum: ["Pending", "Running", "Failed"]
              endpoint:
                type: string
  scope: Namespaced
  names:
    plural: redishttpinstances
    singular: redishttpinstance
    kind: RedisHttpInstance
    shortNames:
    - rhi